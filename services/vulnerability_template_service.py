from sqlalchemy.orm import Session
from models import template as models
import schemas
from services.openai_service import generate_vulnerability_details
import json

def generate_details_with_ai(vuln_name: str):
   generated_json_str = generate_vulnerability_details(vuln_name)
   if generated_json_str:
       try:
           # 清理AI响应，去除Markdown代码块标记
           if generated_json_str.strip().startswith("```json"):
               clean_str = generated_json_str.strip()[7:-3].strip()
           elif generated_json_str.strip().startswith("```"):
               clean_str = generated_json_str.strip()[3:-3].strip()
           else:
               clean_str = generated_json_str.strip()

           # 尝试解析清理后的JSON字符串
           details = json.loads(clean_str)
           return {
               "description": details.get("description", ""),
               "recommendation": details.get("recommendation", "")
           }
       except json.JSONDecodeError as e:
           print(f"AI response JSON parsing failed. Error: {e}")
           print(f"Original AI response string: {generated_json_str}")
           # 如果解析失败，返回一个错误或默认值
           return {
               "description": "AI生成内容失败，请检查日志。",
               "recommendation": "AI生成内容失败，请检查日志。"
           }
   return None


def get_vulnerability_template(db: Session, template_id: int):
    return db.query(models.VulnerabilityTemplate).filter(models.VulnerabilityTemplate.id == template_id).first()

def get_vulnerability_templates(db: Session, skip: int = 0, limit: int = 10, query: str = None):
    query_obj = db.query(models.VulnerabilityTemplate)
    if query:
        from sqlalchemy import func
        query_obj = query_obj.filter(func.lower(models.VulnerabilityTemplate.name).like(f"%{query.lower()}%"))
    
    total = query_obj.count()
    templates = query_obj.offset(skip).limit(limit).all()
    
    return {"templates": templates, "total": total}

def create_vulnerability_template(db: Session, template: schemas.VulnerabilityTemplateCreate):
    db_template = models.VulnerabilityTemplate(**template.dict())
    db.add(db_template)
    db.commit()
    db.refresh(db_template)
    return db_template

def update_vulnerability_template(db: Session, template_id: int, template: schemas.VulnerabilityTemplateUpdate):
    db_template = get_vulnerability_template(db, template_id)
    if db_template:
        update_data = template.dict(exclude_unset=True)
        for key, value in update_data.items():
            setattr(db_template, key, value)
        db.commit()
        db.refresh(db_template)
    return db_template

def delete_vulnerability_template(db: Session, template_id: int):
    db_template = get_vulnerability_template(db, template_id)
    if db_template:
        db.delete(db_template)
        db.commit()
    return db_template