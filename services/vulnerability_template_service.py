from sqlalchemy.orm import Session
from models import template as models
import schemas
from services.openai_service import generate_vulnerability_details
import json

def generate_details_with_ai(vuln_name: str):
    """
    调用AI服务生成漏洞详情。
    现在openai_service层已经处理了格式化、解析和重试，这里只需直接调用并返回结果。
    """
    generated_json_str = generate_vulnerability_details(vuln_name)
    
    if generated_json_str:
        try:
            # openai_service保证返回的是有效的JSON字符串
            return json.loads(generated_json_str)
        except json.JSONDecodeError:
            # 兜底处理，理论上不应该发生
            print(f"Critical: openai_service should have returned valid JSON, but parsing failed.")
            return {
                "description": "AI响应解析失败，请检查底层服务日志。",
                "recommendation": "AI响应解析失败，请检查底层服务日志。"
            }
            
    # 如果AI服务返回None（例如多次重试后仍然失败）
    return {
        "description": "AI生成内容失败，请检查AI服务日志。",
        "recommendation": "AI生成内容失败，请检查AI服务日志。"
    }


def get_vulnerability_template(db: Session, template_id: int):
    return db.query(models.VulnerabilityTemplate).filter(models.VulnerabilityTemplate.id == template_id).first()

def get_vulnerability_templates(db: Session, skip: int = 0, limit: int = 10, query: str = None):
    query_obj = db.query(models.VulnerabilityTemplate)
    if query:
        from sqlalchemy import func
        query_obj = query_obj.filter(func.lower(models.VulnerabilityTemplate.name).like(f"%{query.lower()}%"))
    
    total = query_obj.count()
    templates = query_obj.offset(skip).limit(limit).all()
    
    return {"templates": templates, "total": total}

def create_vulnerability_template(db: Session, template: schemas.VulnerabilityTemplateCreate):
    db_template = models.VulnerabilityTemplate(**template.dict())
    db.add(db_template)
    db.commit()
    db.refresh(db_template)
    return db_template

def update_vulnerability_template(db: Session, template_id: int, template: schemas.VulnerabilityTemplateUpdate):
    db_template = get_vulnerability_template(db, template_id)
    if db_template:
        update_data = template.dict(exclude_unset=True)
        for key, value in update_data.items():
            setattr(db_template, key, value)
        db.commit()
        db.refresh(db_template)
    return db_template

def delete_vulnerability_template(db: Session, template_id: int):
    db_template = get_vulnerability_template(db, template_id)
    if db_template:
        db.delete(db_template)
        db.commit()
    return db_template