const VulnerabilityLibrary = {
  props: {
    visible: {
      type: Boolean,
      default: false
    },
  },
  emits: ['update:visible', 'add-vulnerabilities'],
  template: `
    <el-dialog
      :model-value="visible"
      title="从知识库添加漏洞"
      width="70%"
      @update:modelValue="handleClose"
      top="5vh"
    >
      <div class="vul-library-body">
        <el-input
            v-model="searchQuery"
            placeholder="搜索漏洞名称..."
            clearable
            style="width: 300px; margin-bottom: 15px;"
            @clear="fetchTemplates(true)"
            @keyup.enter="fetchTemplates(true)">
             <template #append>
                <el-button @click="fetchTemplates(true)">搜索</el-button>
            </template>
        </el-input>
        <el-table
            :data="tableData"
            style="width: 100%"
            border 
            height="50vh"
            @selection-change="handleSelectionChange"
            ref="vulTable"
        >
            <el-table-column type="selection" width="55"></el-table-column>
            <el-table-column type="expand">
                <template #default="props">
                    <div class="expand-content">
                        <h4>测试指南</h4>
                        <pre>{{ props.row.test_guide }}</pre>
                        <h4>修复建议</h4>
                        <pre>{{ props.row.recommendation }}</pre>
                    </div>
                </template>
            </el-table-column>
            <el-table-column prop="name" label="漏洞名称" width="250"></el-table-column>
            <el-table-column prop="risk_level" label="风险等级" width="120">
                 <template #default="scope">
                    <el-tag :type="getRiskTagType(scope.row.risk_level)">
                        {{ scope.row.risk_level }}
                    </el-tag>
                </template>
            </el-table-column>
            <el-table-column prop="description" label="漏洞描述"></el-table-column>
        </el-table>
        <el-pagination
            background
            layout="prev, pager, next, total"
            :total="pagination.total"
            :current-page="pagination.currentPage"
            :page-size="pagination.pageSize"
            @current-change="handlePageChange"
            style="margin-top: 15px; justify-content: flex-end;"
        >
        </el-pagination>
      </div>
      <template #footer>
        <span class="dialog-footer">
          <el-button @click="handleClose">取消</el-button>
          <el-button type="primary" @click="confirmSelection">
            添加选中 ({{ selectedVulnerabilities.length }})
          </el-button>
        </span>
      </template>
    </el-dialog>
  `,
  setup(props, { emit }) {
    const { ref, reactive, onMounted, computed } = Vue;
    const { ElMessage } = ElementPlus;

    const tableData = ref([]);
    const searchQuery = ref('');
    const selectedVulnerabilities = ref([]);
    const pagination = reactive({
        currentPage: 1,
        pageSize: 10,
        total: 0
    });

    const handleClose = () => {
      emit('update:visible', false);
    };

    const getRiskTagType = (riskLevel) => {
        switch (riskLevel) {
            case '高': return 'danger';
            case '中': return 'warning';
            case '低': return 'info';
            default: return 'primary';
        }
    };

    const fetchTemplates = async (isSearch = false) => {
        if (isSearch) {
            pagination.currentPage = 1;
        }
        try {
            const params = {
                skip: (pagination.currentPage - 1) * pagination.pageSize,
                limit: pagination.pageSize,
                query: searchQuery.value
            };
            const response = await axios.get('/api/vulnerability-templates/', { params });
            tableData.value = response.data.templates;
            pagination.total = response.data.total;
        } catch (error) {
            console.error('Failed to load vulnerability templates:', error);
            ElMessage.error('加载知识库数据失败');
        }
    };
    
    const handlePageChange = (newPage) => {
        pagination.currentPage = newPage;
        fetchTemplates();
    };

    onMounted(fetchTemplates);

    const handleSelectionChange = (val) => {
      selectedVulnerabilities.value = val;
    };

    const confirmSelection = () => {
      const formattedVulnerabilities = selectedVulnerabilities.value.map(item => ({
          vul_name: item.name || '',
          vul_level: { '高': 'High', '中': 'Medium', '低': 'Low' }[item.risk_level] || 'Medium',
          vul_describe: item.description || '',
          vul_url: '', // 初始为空
          vul_analysis: item.test_guide || '',
          vul_modify_repair: item.recommendation || '',
      }));
      emit('add-vulnerabilities', formattedVulnerabilities);
      handleClose();
    };

    return {
      searchQuery,
      tableData,
      getRiskTagType,
      handleClose,
      handleSelectionChange,
      confirmSelection,
      selectedVulnerabilities,
      pagination,
      handlePageChange,
      fetchTemplates
    };
  }
};