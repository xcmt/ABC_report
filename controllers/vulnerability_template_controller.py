from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from typing import List

from models import database
from services import vulnerability_template_service
import schemas

router = APIRouter(
    prefix="/api/vulnerability-templates",
    tags=["vulnerability-templates"],
)

@router.post("/", response_model=schemas.VulnerabilityTemplateResponse)
def create_vulnerability_template(template: schemas.VulnerabilityTemplateCreate, db: Session = Depends(database.get_db)):
    return vulnerability_template_service.create_vulnerability_template(db=db, template=template)

@router.get("/", response_model=schemas.VulnerabilityTemplatePaginatedResponse)
def read_vulnerability_templates(skip: int = 0, limit: int = 10, query: str = None, db: Session = Depends(database.get_db)):
    result = vulnerability_template_service.get_vulnerability_templates(db, skip=skip, limit=limit, query=query)
    return result

@router.get("/{template_id}", response_model=schemas.VulnerabilityTemplateResponse)
def read_vulnerability_template(template_id: int, db: Session = Depends(database.get_db)):
    db_template = vulnerability_template_service.get_vulnerability_template(db, template_id=template_id)
    if db_template is None:
        raise HTTPException(status_code=404, detail="Template not found")
    return db_template

@router.post("/generate-ai-details", response_model=schemas.VulnerabilityGenerationResponse)
def generate_ai_details(request: schemas.VulnerabilityGenerationRequest):
   details = vulnerability_template_service.generate_details_with_ai(request.vuln_name)
   if not details:
       raise HTTPException(status_code=500, detail="Failed to generate details from AI")
   return details

@router.put("/{template_id}", response_model=schemas.VulnerabilityTemplateResponse)
def update_vulnerability_template(template_id: int, template: schemas.VulnerabilityTemplateUpdate, db: Session = Depends(database.get_db)):
    db_template = vulnerability_template_service.update_vulnerability_template(db, template_id=template_id, template=template)
    if db_template is None:
        raise HTTPException(status_code=404, detail="Template not found")
    return db_template

@router.delete("/{template_id}", response_model=schemas.VulnerabilityTemplateResponse)
def delete_vulnerability_template(template_id: int, db: Session = Depends(database.get_db)):
    db_template = vulnerability_template_service.delete_vulnerability_template(db, template_id=template_id)
    if db_template is None:
        raise HTTPException(status_code=404, detail="Template not found")
    return db_template